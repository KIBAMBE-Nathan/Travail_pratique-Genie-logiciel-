-- Insert or Update etudiant
CREATE OR REPLACE FUNCTION sp_insert_etudiant(
    in_id INT,
    in_nom VARCHAR(50),
    in_postnom VARCHAR(50),
    in_prenom VARCHAR(50),
    in_sexe CHAR(1),
    in_matricule VARCHAR(20)
)
RETURNS VOID AS $$
BEGIN
    IF NOT EXISTS(SELECT * FROM etudiant WHERE id = in_id) THEN
        INSERT INTO etudiant(id, nom, postnom, prenom, sexe, matricule) 
        VALUES (in_id, in_nom, in_postnom, in_prenom, in_sexe, in_matricule);
    ELSE
        UPDATE etudiant 
        SET nom = in_nom, postnom = in_postnom, prenom = in_prenom, sexe = in_sexe, matricule = in_matricule 
        WHERE id = in_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Delete etudiant
CREATE OR REPLACE FUNCTION sp_delete_etudiant(
    in_id INT
)
RETURNS VOID AS $$
BEGIN
    IF EXISTS(SELECT * FROM etudiant WHERE id = in_id) THEN
        DELETE FROM etudiant WHERE id = in_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Select all etudiant
CREATE OR REPLACE FUNCTION sp_select_etudiant()
RETURNS TABLE(id INT, nom VARCHAR(50), postnom VARCHAR(50), prenom VARCHAR(50), sexe CHAR(1), matricule VARCHAR(20)) AS $$
BEGIN
    RETURN QUERY SELECT id, nom, postnom, prenom, sexe, matricule FROM etudiant ORDER BY nom ASC;
END;
$$ LANGUAGE plpgsql;

-- Select one etudiant
CREATE OR REPLACE FUNCTION sp_select_etudiants(
    in_id INT
)
RETURNS TABLE(id INT, nom VARCHAR(50), postnom VARCHAR(50), prenom VARCHAR(50), sexe CHAR(1), matricule VARCHAR(20)) AS $$
BEGIN
    RETURN QUERY SELECT id, nom, postnom, prenom, sexe, matricule FROM etudiant WHERE id = in_id;
END;
$$ LANGUAGE plpgsql;

-- Insert or Update telephone
CREATE OR REPLACE FUNCTION sp_insert_telephone(
    in_id INT,
    in_id_proprietaire INT,
    in_initial VARCHAR(4),
    in_numero VARCHAR(9)
)
RETURNS VOID AS $$
BEGIN
    IF NOT EXISTS(SELECT * FROM telephone WHERE id = in_id) THEN
        INSERT INTO telephone(id, id_proprietaire, initial, numero) 
        VALUES (in_id, in_id_proprietaire, in_initial, in_numero);
    ELSE
        UPDATE telephone 
        SET id_proprietaire = in_id_proprietaire, initial = in_initial, numero = in_numero 
        WHERE id = in_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Delete telephone
CREATE OR REPLACE FUNCTION sp_delete_telephone(
    in_id INT
)
RETURNS VOID AS $$
BEGIN
    IF EXISTS(SELECT * FROM telephone WHERE id = in_id) THEN
        DELETE FROM telephone WHERE id = in_id;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Select all telephone
CREATE OR REPLACE FUNCTION sp_select_telephones()
RETURNS TABLE(id INT, id_proprietaire INT, initial VARCHAR(4), numero VARCHAR(9)) AS $$
BEGIN
    RETURN QUERY SELECT id, id_proprietaire, initial, numero FROM telephone ORDER BY numero ASC;
END;
$$ LANGUAGE plpgsql;

-- Select all telephone of etudiant
CREATE OR REPLACE FUNCTION sp_select_telephones_personne(
    in_id_personne INT
)
RETURNS TABLE(id INT, id_proprietaire INT, initial VARCHAR(4), numero VARCHAR(9)) AS $$
BEGIN
    RETURN QUERY SELECT id, id_proprietaire, initial, numero FROM telephone WHERE id_proprietaire = in_id_personne ORDER BY numero ASC;
END;
$$ LANGUAGE plpgsql;

-- Select one etudiant
CREATE OR REPLACE FUNCTION sp_select_telephone(
    in_id INT
)
RETURNS TABLE(id INT, id_proprietaire INT, initial VARCHAR(4), numero VARCHAR(9)) AS $$
BEGIN
    RETURN QUERY SELECT id, id_proprietaire, initial, numero FROM telephone WHERE id = in_id;
END;
$$ LANGUAGE plpgsql;

-- Stored Procedure for report of etudiants
CREATE OR REPLACE FUNCTION sp_liste_etudiants()
RETURNS TABLE(id INT, nom TEXT, sexe CHAR(1), idtel INT, numero TEXT) AS $$
BEGIN
    RETURN QUERY 
        SELECT e.id, e.nom || ' ' || COALESCE(e.postnom, '') || ' ' || COALESCE(e.prenom, '') AS nom,
    e.sexe, t.id AS idtel, t.initial || t.numero AS numero
    FROM etudiant e
    LEFT OUTER JOIN telephone t
    ON e.id = t.id_proprietaire;
END;
$$ LANGUAGE plpgsql;

-- Test Insert and Update
SELECT sp_insert_etudiant(1, 'Isamuna', 'Nkembo', 'Josue', 'M', '22LIAGELJ253');
SELECT sp_insert_etudiant(2, 'Kibambe', 'Kabululu', 'Nathan', 'M', '22LIAGELJ620114');
SELECT sp_insert_etudiant(3, 'Kyakimwa', 'Ndivito', 'Milka', 'F', '22LIAGELJ620354');
SELECT * FROM etudiant;

SELECT sp_insert_telephone(1, 1, '+250', '785623146');
SELECT sp_insert_telephone(2, 1, '+243', '0812700368');
SELECT sp_insert_telephone(3, 2, '+243', '985645235');
SELECT sp_insert_telephone(4, 3, '+243', '815790584');
SELECT sp_insert_telephone(5, 3, '+242', '808256231');
SELECT * FROM telephone;

-- Test delete
-- SELECT sp_delete_telephone(1);
-- SELECT * FROM telephone;

-- SELECT sp_delete_etudiant(3);
-- SELECT * FROM etudiant;

-- Test Select all
-- SELECT sp_select_etudiants();

SELECT sp_select_telephones();

-- Test Select One
SELECT sp_select_etudiants(2);

SELECT sp_select_telephone(4);

SELECT sp_select_telephones_personne(2);

-- Test Select report
SELECT sp_liste_etudiants();